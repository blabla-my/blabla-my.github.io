<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>my blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-05T12:49:32.203Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>blabla-my</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>broken_invitation</title>
    <link href="http://yoursite.com/2020/08/05/broken-invitation/"/>
    <id>http://yoursite.com/2020/08/05/broken-invitation/</id>
    <published>2020-08-05T12:45:54.000Z</published>
    <updated>2020-08-05T12:49:32.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="broken-invitation-baby"><a href="#broken-invitation-baby" class="headerlink" title="broken_invitation(baby)"></a>broken_invitation(baby)</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">There was a birthday of Nick. He decided to invite three friends: Alice, Bob <span class="keyword">and</span> Caroll, but</span><br><span class="line">he worries about the security too much <span class="keyword">and</span> decided to use the classical RSA cryptosystem.</span><br><span class="line">He’s sent the same message m to all his friends: Anna, Boris <span class="keyword">and</span> Caroll who have their public</span><br><span class="line">keys (e, N): (<span class="number">3</span>, NA),(<span class="number">3</span>, NB) <span class="keyword">and</span> (<span class="number">3</span>, NC) respectively, <span class="keyword">and</span> they received c1, c2 <span class="keyword">and</span> c3. Find</span><br><span class="line">the message!</span><br><span class="line">To get integer value <span class="keyword">from</span> the string S = S1S2 . . . Sn of n ASCII characters, we used the</span><br><span class="line">following formula:</span><br><span class="line">func(S) = X</span><br><span class="line">n−<span class="number">1</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">ASCII(Si+<span class="number">1</span>) · <span class="number">2</span></span><br><span class="line"><span class="number">8</span>·i</span><br><span class="line">where ASCII(...) <span class="keyword">is</span> an ASCII value of the character.</span><br><span class="line">Parameters are:</span><br><span class="line">NA=<span class="number">924506488821656685683910901697171383575761384058997452768161613244316449994435541406042874502024337501621283644549497446327156438552952982774526792356194523541927862677535193330297876054850415513120023262998063090052673978470859715791539316871</span></span><br><span class="line"></span><br><span class="line">NB=<span class="number">88950937117255391223977435698486265468789676087383749025900580476857958577458361251855358598960638495873663408330100969812759959</span></span><br><span class="line"><span class="number">6375832972110682747931213790547291697861993194543440074818049462638</span></span><br><span class="line"><span class="number">73110263761707375758247409</span></span><br><span class="line"></span><br><span class="line">NC=<span class="number">46120424124283407631877739918717497745499448442081604908717069311339764302716539899549382470988469546914660420190473379187397425725302899111432304753418508501904277711772373006543099077921097373552317823052570252978144835744949941108416471431004677</span></span><br><span class="line"></span><br><span class="line">c1=<span class="number">388825822870813587493154615238012547494666151428446904627095554917874019374474234421038941934804209410745453928513883448152675699305596595130706561989245940306390625802518940063853046813376063232724848204735684760377804361178651844505881089386</span></span><br><span class="line"></span><br><span class="line">c2=<span class="number">41320991457864785805737012810405044223321840177922934218907012680128835668532546286019372480980899900523334905784737579862612320776695426650741196980265422624230095967704040276250440511648395550180630597000941240639594</span></span><br><span class="line"></span><br><span class="line">c3=<span class="number">43690392479478733802175619151519523453201200942800536494806512990350504964044289998495399805335942227586694852363272883331080188161308470522306485983861114557449204887644890409995598852299488628159224012730372865280540944897915435604154376354144428</span></span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>RSA加密，三组&lt;e1,N1&gt; &lt;e2,N2&gt; &lt;e3,N3&gt;<br>e1=e2=e3=3</p><p>hastard攻击<br>(<a href="https://paper.seebug.org/727/#42-hastad">https://paper.seebug.org/727/#42-hastad</a>)</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">NA = <span class="number">924506488821656685683910901697171383575761384058997452768161613244316449994435541406042874502024337501621283644549497446327156438552952982774526792356194523541927862677535193330297876054850415513120023262998063090052673978470859715791539316871</span></span><br><span class="line">NB =<span class="number">88950937117255391223977435698486265468789676087383749025900580476857958577458361251855358598960638495873663408330100969812759959637583297211068274793121379054729169786199319454344007481804946263873110263761707375758247409</span></span><br><span class="line">NC =<span class="number">46120424124283407631877739918717497745499448442081604908717069311339764302716539899549382470988469546914660420190473379187397425725302899111432304753418508501904277711772373006543099077921097373552317823052570252978144835744949941108416471431004677</span></span><br><span class="line"></span><br><span class="line">c1 =<span class="number">388825822870813587493154615238012547494666151428446904627095554917874019374474234421038941934804209410745453928513883448152675699305596595130706561989245940306390625802518940063853046813376063232724848204735684760377804361178651844505881089386</span></span><br><span class="line">c2 = <span class="number">4132099145786478580573701281040504422332184017792293421890701268012883566853254627860193724809808999005233349057847375798626123207766954266507411969802654226242300965967704040276250440511648395550180630597000941240639594</span></span><br><span class="line">c3 =<span class="number">43690392479478733802175619151519523453201200942800536494806512990350504964044289998495399805335942227586694852363272883331080188161308470522306485983861114557449204887644890409995598852299488628159224012730372865280540944897915435604154376354144428</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CRT</span>(<span class="params">C,N</span>):</span></span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line">    M=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> N:</span><br><span class="line">        M *= n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(N)):</span><br><span class="line">        _M = M//(N[i])</span><br><span class="line">        d = invert(_M,N[i])</span><br><span class="line">        x += C[i]*d*_M%M</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> x%M</span><br><span class="line">X = CRT([c1,c2,c3],[NA,NB,NC])</span><br><span class="line"></span><br><span class="line">print(n2s(iroot(X,<span class="number">3</span>)[<span class="number">0</span>])[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;broken-invitation-baby&quot;&gt;&lt;a href=&quot;#broken-invitation-baby&quot; class=&quot;headerlink&quot; title=&quot;broken_invitation(baby)&quot;&gt;&lt;/a&gt;broken_invitation(b
      
    
    </summary>
    
    
      <category term="Crypto" scheme="http://yoursite.com/categories/Crypto/"/>
    
    
      <category term="cybrics-2020" scheme="http://yoursite.com/tags/cybrics-2020/"/>
    
  </entry>
  
  <entry>
    <title>too_secure</title>
    <link href="http://yoursite.com/2020/08/05/too-secure/"/>
    <id>http://yoursite.com/2020/08/05/too-secure/</id>
    <published>2020-08-05T12:45:06.000Z</published>
    <updated>2020-08-05T12:53:38.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="too-secure"><a href="#too-secure" class="headerlink" title="too_secure"></a>too_secure</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Bob worries about security too much <span class="keyword">and</span> decided to change the original Pedersen commitment scheme adding there several steps. Find the vulnerability <span class="keyword">in</span> Bob’s system!</span><br><span class="line">    </span><br><span class="line"><span class="comment">#Initialization</span></span><br><span class="line"><span class="number">1</span>) Choose two big primes p <span class="keyword">and</span> q such that q|(p − <span class="number">1</span>) <span class="keyword">and</span> choose g ∈ Zmodp of order q.</span><br><span class="line"><span class="number">2</span>) Choose x ∈ Zmodq. x <span class="keyword">is</span> our secret.</span><br><span class="line"><span class="number">3</span>) Compute G = g^x mod p</span><br><span class="line"><span class="number">4</span>) Transform G into G0: <span class="number">1024</span>-bit binary number <span class="keyword">with</span> big endian.</span><br><span class="line"><span class="number">5</span>) Using hash-function SHA<span class="number">-512</span>, compute a = SHA512(G0)</span><br><span class="line"><span class="number">6</span>) Find a0: transform binary a into an integer number.</span><br><span class="line"><span class="number">7</span>) Find a1 = (a0^a0) mod φ(p), where φ(p) <span class="keyword">is</span> Euler function.</span><br><span class="line"><span class="number">8</span>) Finally, calculate h = g^a1 mod p.Parameters p <span class="keyword">and</span> g are well-known <span class="keyword">and</span> open <span class="keyword">for</span> everyone.</span><br><span class="line">    </span><br><span class="line"><span class="comment">#Commitment</span></span><br><span class="line">To make a commitment we choose a random r <span class="keyword">from</span> &#123;<span class="number">2</span>, . . . , p−<span class="number">1</span>&#125; <span class="keyword">and</span> calculate </span><br><span class="line">c = G· h^r. The commitment would be c.</span><br><span class="line"></span><br><span class="line"><span class="comment">#Proof</span></span><br><span class="line">After the decision <span class="keyword">is</span> made by sender <span class="keyword">and</span> verifier about the verification of the commitment,sender opens x <span class="keyword">and</span> r values, <span class="keyword">and</span> the verifier checks the equality c = G·hr.</span><br><span class="line"></span><br><span class="line"><span class="comment">#Additional information</span></span><br><span class="line">To get integer value <span class="keyword">from</span> the string S = S1S2 . . . Sn of n ASCII characters, use the following</span><br><span class="line">formula:</span><br><span class="line">func(S) = sigma(ASCII(Si+<span class="number">1</span>)·<span class="number">2</span>^(<span class="number">8</span>·i)) <span class="keyword">for</span> i <span class="keyword">from</span> <span class="number">0</span> to n<span class="number">-1</span></span><br><span class="line">where ASCII(...) <span class="keyword">is</span> an ASCII value of the character.</span><br><span class="line"></span><br><span class="line"><span class="comment">#Task</span></span><br><span class="line">Break the system <span class="keyword">with</span> the following parameters. As a result, you should get the value r2</span><br><span class="line">which you disclose to the verifier <span class="keyword">with</span> the string M2, <span class="keyword">and</span> the verifier confirms the commitment <span class="keyword">as</span> <span class="keyword">with</span> (M1, r1) <span class="keyword">as</span> <span class="keyword">with</span> (M2, r2).</span><br><span class="line">The parameters are:</span><br><span class="line">• p =<span class="number">12039102490128509125925019010000012423515617235219127649182470182570</span></span><br><span class="line"><span class="number">195018265927223</span></span><br><span class="line">• g =<span class="number">107290725793070521848483023224513321924562296190441811050630117415</span></span><br><span class="line"><span class="number">16558110216720725</span></span><br><span class="line">• r1 =<span class="number">31245182471</span></span><br><span class="line">• M1 = <span class="string">&#x27;Hi! I am Vadim Davydov from ITMO University&#x27;</span></span><br><span class="line">• M2 = <span class="string">&#x27;Transfer the points for easy task to this team&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">题目给了两组明文M1,M2</span><br><span class="line">M1,M2使用相同的公钥&lt;g,p&gt;生成commitment = G·h^r (mod p) <span class="comment">#这里应有mod p,题目可能是没写</span></span><br><span class="line">c1 = G1·h1^r1 (mod p)</span><br><span class="line">c2 = G2·h2^r2 (mod p)</span><br><span class="line">题目所谓的<span class="keyword">break</span>应为使：c1==c2</span><br><span class="line">这样就可以让接受方以为c2来自c1的发送方，从而达到了伪造消息的目的</span><br><span class="line"></span><br><span class="line">c1 == c2</span><br><span class="line"></span><br><span class="line">==&gt;    g^x1·h1^r1 == g^x2·h2^r2 (mod p)</span><br><span class="line">==&gt;    g^(x1+a1*r1) == g^(x2+a2*r2) (mod p)</span><br><span class="line"><span class="comment">#此处的a1,a2即为M1,M2分别按照计算步骤(7)计算得到的 &#x27;a1&#x27; </span></span><br><span class="line">==&gt;    x1+a1*r1 == x2+a2*r2  (mod loop(p))</span><br><span class="line"><span class="comment">#loop(p)是指使得任意u, u^y == 1 (mod p)成立的最小的l的值</span></span><br><span class="line"><span class="comment">#由于u^φ(p) == 1 (mod p) , 于是 loop(p) | φ(p)</span></span><br><span class="line"><span class="comment">#可以将φ(p) = p-1的因子一个个判断下是不是loop(p)</span></span><br><span class="line"></span><br><span class="line">==&gt;    r2 == ((x1-x2)+a1*r1) * inv(a2)  (mod p)</span><br><span class="line"><span class="comment">#这步计算就很简单了</span></span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512</span><br><span class="line">p =<span class="number">12039102490128509125925019010000012423515617235219127649182470182570195018265927223</span></span><br><span class="line">g =<span class="number">10729072579307052184848302322451332192456229619044181105063011741516558110216720725</span></span><br><span class="line">r1 =<span class="number">31245182471</span></span><br><span class="line"></span><br><span class="line">P1 = <span class="number">6</span></span><br><span class="line">P2 = <span class="number">7</span></span><br><span class="line">P3 = <span class="number">7</span></span><br><span class="line">P4 = <span class="number">3671</span></span><br><span class="line">P5 = <span class="number">10733</span></span><br><span class="line">P6 = <span class="number">1039300813886545966418005631983853921163721828798787466771912919828750891</span>      <span class="comment">#p循环节</span></span><br><span class="line">P = [P1,P2,P3,P4,P5,P6]</span><br><span class="line"><span class="comment">#print(P1*P2*P3*P4*P5*P6 == p-1)</span></span><br><span class="line"></span><br><span class="line">M1 = <span class="string">&#x27;Hi! I am Vadim Davydov from ITMO University&#x27;</span></span><br><span class="line">M2 = <span class="string">&#x27;Transfer the points for easy task to this team&#x27;</span></span><br><span class="line"></span><br><span class="line">x1 = s2n(M1[::<span class="number">-1</span>])</span><br><span class="line">x2 = s2n(M2[::<span class="number">-1</span>])</span><br><span class="line">G1 = pow(g,x1,p)</span><br><span class="line">G2 = pow(g,x2,p)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_a</span>(<span class="params">G</span>):</span></span><br><span class="line">    _G = G.to_bytes(<span class="number">1024</span>//<span class="number">8</span>,byteorder = <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    h = sha512()</span><br><span class="line">    h.update(_G)</span><br><span class="line">    a = int.from_bytes(h.digest(),byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    _a = pow(a,a,p<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> _a</span><br><span class="line"></span><br><span class="line">a1 = cal_a(G1)</span><br><span class="line">a2 = cal_a(G2)</span><br><span class="line"><span class="comment">#print(a1,a2)</span></span><br><span class="line"></span><br><span class="line">h1 = pow(g,a1,p)</span><br><span class="line">h2 = pow(g,a2,p)</span><br><span class="line"><span class="comment">#print(h1,h2)</span></span><br><span class="line"></span><br><span class="line">_p = P6</span><br><span class="line"><span class="comment">#print(gcd(x1+a1*r1,_p))</span></span><br><span class="line">r2 = (((x1-x2)+a1*r1)*invert(a2,_p))%_p</span><br><span class="line">print(r2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#check if result is right</span></span><br><span class="line">L = (G1*pow(h1,r1,p))%p</span><br><span class="line">R = (G2*pow(h2,r2,p))%p</span><br><span class="line">print(L==R)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;too-secure&quot;&gt;&lt;a href=&quot;#too-secure&quot; class=&quot;headerlink&quot; title=&quot;too_secure&quot;&gt;&lt;/a&gt;too_secure&lt;/h2&gt;&lt;h3 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="Crypto" scheme="http://yoursite.com/categories/Crypto/"/>
    
    
      <category term="cybrics-2020" scheme="http://yoursite.com/tags/cybrics-2020/"/>
    
  </entry>
  
  <entry>
    <title>Crypto: you_raise_me_up</title>
    <link href="http://yoursite.com/2020/08/04/Crypto-you-raise-me-up/"/>
    <id>http://yoursite.com/2020/08/04/Crypto-you-raise-me-up/</id>
    <published>2020-08-04T04:59:58.000Z</published>
    <updated>2020-08-04T05:07:34.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">n = <span class="number">2</span> ** <span class="number">512</span></span><br><span class="line">m = random.randint(<span class="number">2</span>, n<span class="number">-1</span>) | <span class="number">1</span></span><br><span class="line">c = pow(m, bytes_to_long(flag), n)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&#x27;m = &#x27;</span> + str(m))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&#x27;c = &#x27;</span> + str(c))</span><br><span class="line"><span class="comment"># m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span></span><br><span class="line"><span class="comment"># c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span></span><br></pre></td></tr></table></figure><p>一道离散对数的题目，即</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m^flag = c  (mod n)</span><br><span class="line">n = <span class="number">2</span>^<span class="number">512</span></span><br><span class="line"><span class="comment">#已知m与c，求解flag</span></span><br></pre></td></tr></table></figure><p>思路如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">m^flag = c (mod <span class="number">2</span>^j), <span class="number">1</span>&lt;= j &lt;= <span class="number">512</span></span><br><span class="line"><span class="comment">#设f(j) = flag % (2^j)</span></span><br><span class="line"><span class="comment">#m(j) = m % (2^j)</span></span><br><span class="line"><span class="comment">#c(j) = c % (2^j)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#由于phi(2^j) = 2^(j-1), 则总有 m^flag = m^f(j-1) = c (mod 2^j)</span></span><br><span class="line"><span class="comment">#在已知f(j)的情况下，f(j+1) = f(j) 或 f(j)+2^j</span></span><br><span class="line"><span class="comment">#对于上式计算出的f(j+1),检查其是否满足 m^f(j+1) = c (mod 2^(j+2))</span></span><br><span class="line">    <span class="comment">#若满足，保留f(j+1)</span></span><br><span class="line">    <span class="comment">#不满足，丢弃这个结果</span></span><br><span class="line"><span class="comment">#一直计算到j = 511</span></span><br></pre></td></tr></table></figure><p>exploit：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> g</span><br><span class="line"><span class="keyword">import</span> libnum <span class="keyword">as</span> l</span><br><span class="line">m = <span class="number">391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span></span><br><span class="line">c = <span class="number">6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span></span><br><span class="line">n = <span class="number">2</span>**<span class="number">512</span></span><br><span class="line">fi = <span class="number">2</span>**<span class="number">511</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">5</span></span><br><span class="line">N = <span class="number">2</span>**i</span><br><span class="line">phi = N//<span class="number">2</span></span><br><span class="line">res = [<span class="number">5</span>,<span class="number">13</span>]</span><br><span class="line">tmp_res = []</span><br><span class="line">_m = m%N</span><br><span class="line">print(_m)</span><br><span class="line">_c = c%N</span><br><span class="line">print(_c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(g.powmod(_c,phi,N))</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>,<span class="number">513</span>):</span><br><span class="line">    N = N*<span class="number">2</span></span><br><span class="line">    phi = phi*<span class="number">2</span></span><br><span class="line">    _m = m % N</span><br><span class="line">    _c = c % N</span><br><span class="line">    tmp_res = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> res:</span><br><span class="line">        <span class="keyword">if</span> g.powmod(_m,j,N) == _c:</span><br><span class="line">            tmp_res.append(j)</span><br><span class="line">        <span class="keyword">if</span> g.powmod(_m,j+phi//<span class="number">2</span>,N) == _c:</span><br><span class="line">            tmp_res.append(j+phi//<span class="number">2</span>)</span><br><span class="line">    res = tmp_res</span><br><span class="line">    tmp_res = []</span><br><span class="line"></span><br><span class="line">print(l.n2s(res[<span class="number">0</span>]))</span><br><span class="line">print(l.n2s(res[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p>flag{5f95ca93-1594-762d-ed0b-a9139692cb4a}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="Crypto" scheme="http://yoursite.com/categories/Crypto/"/>
    
    
      <category term="Crypto" scheme="http://yoursite.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>HAPPYNEWYEAR2019</title>
    <link href="http://yoursite.com/2020/08/04/HAPPYNEWYEAR2019/"/>
    <id>http://yoursite.com/2020/08/04/HAPPYNEWYEAR2019/</id>
    <published>2020-08-04T03:51:37.000Z</published>
    <updated>2020-08-04T03:53:06.182Z</updated>
    
    <content type="html"><![CDATA[<p><img src="together.jpg" alt="happy new year!"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;together.jpg&quot; alt=&quot;happy new year!&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
